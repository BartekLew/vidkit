#!/bin/sh

do_math() {
    echo "scale=2;$@" | bc
}

video_codec=libx264
audio_codec=libvorbis
pic_viewer=gpicview

movie=$(readlink -e $1)
density=$2
start=$3
duration=$4

if [[ "$movie" == "" ]]; then
    echo "
USAGE: vidls movie_file [dump_each_n_frames [first_frame [duration_in_seconds]]]
" 1>&2
    exit 1
fi
if [[ "$density" == "" ]];then
    density=10
fi

filter="framestep=$density"
if [[ "$mplayer_filters" != "" ]];then
    filter="$mplayer_filters,$filter"
fi

if [[ "$start" != "" ]]; then
    start_flag="-ss $start"
fi
if [[ "$duration" != "" ]]; then
    stop_flag="-endpos $duration"
fi

movie_name=$(basename $movie)

workdir=/tmp/vidls/$RANDOM
echo ">>> vidls: frames generated to: $workdir"
mkdir -p $workdir
cd $workdir

tmpfile=/tmp/$RANDOM
mplayer -quiet $movie -vf "$filter" $start_flag $stop_flag $MPLAYER_FLAGS -ao null -vo png &> $tmpfile
if [[ $? != 0 ]];then
    echo ">>> vidls: mplayer failed. :-( output:"
    cat $tmpfile
    exit 1
fi
rm $tmpfile

echo ">>> vidls: labeling frames..."
frames=$(ls)
total_frames=$(echo $frames | wc -w)
tpf=$(do_math $duration/$total_frames)
current_time="$start"
current_frame="1"
for frame in $frames
do
    echo "$current_frame / $total_frames"
    current_time=$(do_math $current_time+$tpf)
    convert -pointsize 50 label:"$current_time ($current_frame / $total_frames)" -gravity Center $frame -append $frame
    current_frame=$(do_math $current_frame+1)
done | wait_nfo "$total_frames"

$pic_viewer .

echo ">>>vidls: cleanup"
cd
rm -r $workdir
